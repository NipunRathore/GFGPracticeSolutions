//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
int solve(int prices[], int index, int buy, int N, int limit, vector<vector<vector<int>>>& dp)
{
    // initially we pass index = 0 ; 
    // if 0 is the size of prices then no transaction can be done 
    if (index == N)
    {
        return 0 ; 
    }

    // When limit reaches 0. No more transactions can be done so return ...
    if (limit == 0)
    {
        return 0 ;
    }

    if (dp[index][buy][limit] !=  -1)
    {
        return dp[index][buy][limit] ; 
    }

    int profit = 0 ; 
    if (buy)
    {
        // when allowe to buy -> you can either buy on current day/index OR skip to next day 
        int buy = -prices[index] + solve(prices, index + 1, 0, N, limit, dp) ; 
        int ignore = 0 + solve(prices, index + 1, 1, N, limit, dp) ; 

        profit = max (buy, ignore) ; 
    }

    else 
    {
        // when allowed to sell -> either sell on current index or skip to next index 

        // LIMIT updated/reduced only when 1 Transaction COmpleted
        // Transaction => BUY + SELL 
        // Therefore, after Selling reduce the limit by 1 
        int buy = +prices[index] + solve(prices, index + 1, 1, N, limit - 1, dp) ; 
        int ignore = 0 + solve(prices, index + 1, 0, N, limit, dp) ; 
        // answer is max of generated by both options 
        profit = max (buy, ignore) ; 
    }
    dp[index][buy][limit] = profit ; 
    return dp[index][buy][limit] ; 
}


    int maxProfit(int K, int N, int A[]) {
        // code here
        vector<vector<vector<int>>> dp (N, vector<vector<int>> (2, vector<int> (K + 1, -1))) ; 
        return solve(A, 0, 1, N, K, dp) ;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> K;
        cin >> N;
        int A[N];
        for (int i = 0; i < N; i++) cin >> A[i];

        Solution ob;
        cout << ob.maxProfit(K, N, A) << endl;
    }
    return 0;
}
// } Driver Code Ends